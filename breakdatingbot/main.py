from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram import Bot, types
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import config

from breakdb import breakdb

from dotenv import load_dotenv
import os

load_dotenv()
logging.basicConfig(level=logging.INFO)
breakdatingkey = os.getenv('BREAKDATINGKEY')
bot = Bot(breakdatingkey)

logging.basicConfig(level=logging.INFO)

db = breakdb('break.db')

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'],state='*')
async def start(message:types.Message):

	#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –≤—Ö–æ–¥–∞

	start_button = KeyboardButton("Hello, let's break together")

	break_start = ReplyKeyboardMarkup(one_time_keyboard=True)

	break_start.add(start_button)
	await message.answer("Hello\n\n,reply_markup=break_start")
	if(not db.user_exists(message.from_user.id)):
		#–µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		db.add_user(message.from_user.username,message.from_user.id,message.from_user.full_name)
		await bot.send_message(-1001406772763,f'New User!\nID - {str(message.from_user.id)}\nusername - {str(message.from_user.username)}')

		# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ó–∞–π—Ç–∏ –≤ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä

@ dp.message_handler(
	lambda message: message.text == 'Welcome home' or message.text == '/menu_break',
		state='*')

def menu_break(message: types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é —Å–∞–º–æ–≥–æ –±–æ—Ç–∞'''
	# –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
	button_search = KeyboardButton('Find Somebody')

	button_create_profile = KeyboardButton('Create a profile')

	button_edit_profile = KeyboardButton('Edit profile')

	button_remove_profile = KeyboardButton('Delete')

	button_admin = KeyboardButton('–ê–¥–º–∏–Ω–∫–∞‚öôÔ∏è')

	menu = ReplyKeyboardMarkup()



#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã

class CreateProfile(StatesGroup):
	name = State()
	description = State()
	city = State()
	photo = State()
	sex = State()
	age = State()
	social_link	 = State()


#—Ö–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(lambda message: message.text == 'Create profile',state='*')
async def create_profile(message : types.Message):
	#–∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
	button_exit = KeyboardButton('Exit')

	menu_exit = ReplyKeyboardMarkup()

	menu_exit.add(button_exit)

	if message.from_user.username != None:
		if(not db.profile_exists(message.from_user.id)):
			await message.answer("To create a profile you should give me some information about you\nLet's start with your name?",reply_markup=menu_exit)
			await CreateProfile.name.set()
		elif(db.profile_exists(message.from_user.id)) :
			await message.answer('You already have profile\n\n')
	else:
		await message.answer('Your telegram username is not filled!\n\nPlease do this to get \n Please go to the settings and change that')
#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º—è
@dp.message_handler(state=CreateProfile.name)
async def create_profile_name(message: types.Message, state: FSMContext):
	if str(message.text) == 'Exit':
		await state.finish()
		await menu_break(message)
		return
	if len(str(message.text)) < 35 and (not str(message.text) in cus_ans.ban_symvols):
		await state.update_data(profile_name=message.text.lower())
		await message.reply(message.text.title() + 'Good for you, .name, what is your message to the world?')
		await CreateProfile.next()
	elif str(message.text) in cus_ans.ban_symvols:
		await message.answer('Forbidden symbols error')
	else:
		await message.answer(cus_ans.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

@dp.message_handler(state=CreateProfile.description)
async def create_profile_description(message: types.Message, state: FSMContext):
	if str(message.text) == 'Exit':
		await state.finish()
		await menu_break(message)
		return
	if len(message.text) < 35 and (not str(message.text) in cus_ans.ban_symvols):
		await state.update_data(profile_description=message.text)
		await message.answer('Choose the city')
		await CreateProfile.next()
	elif str(message.text) in cus_ans.ban_symvols:
		await message.answer('Forbidden symbols error')
	else:
		await message.answer(cus_ans.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.message_handler(state=CreateProfile.city)
async def create_profile_city(message: types.Message, state: FSMContext):
	if str(message.text) == 'Exit':
		await state.finish()
		await menu_break(message)
		return
	if len(message.text) < 35 and (not str(message.text) in cus_ans.ban_symvols):
		await state.update_data(profile_city=message.text.lower())
		await message.answer('–ü—Ä–µ–ª–µ—Å—Ç–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º —Ñ–æ—Ç–æ–∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ –±—ã –≤—Å–µ –∑–Ω–∞–ª–∏ –∫–∞–∫–∞—è —Ç—ã –∫—Ä–∞—Å–∞–≤–∏—Ü–∞(—Ö–∏—Ö–∏)üñº\n\n–í–∞–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º!')
		await CreateProfile.next()
	elif str(message.text) in cus_ans.ban_symvols:
		await message.answer('Forbidden symbols error')
	else:
		await message.answer(cus_ans.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message_handler(state=CreateProfile.photo,content_types=['photo'])
async def create_profile_photo(message: types.Message, state: FSMContext):
	if str(message.text) == 'Exit':
		await state.finish()
		await menu_break(message)

	#–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
	button_male = KeyboardButton('Male')

	button_wooman = KeyboardButton('Female')


	sex_input = ReplyKeyboardMarkup(one_time_keyboard=True)
	sex_input.add(button_male,button_wooman)

	await message.photo[-1].download('photo_user/' + str(message.from_user.id) + '.jpg')
	await message.answer('You look amazing',reply_markup=sex_input)
	await CreateProfile.next()
#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–∞
@dp.message_handler(state=CreateProfile.sex)
async def create_profile_sex(message: types.Message, state: FSMContext):
	if str(message.text) == 'Exit':
		await state.finish()
		await menu_break(message)
		return
	if message.text == '–ú—É–∂—á–∏–Ω–∞' or message.text == '–ñ–µ–Ω—â–∏–Ω–∞':
		await state.update_data(profile_sex=message.text.lower())
		await message.answer('Amazing!\ntell me your age now\n')
		await CreateProfile.next()
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return
	else:
		await message.answer(cus_ans.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Å—Ç–∞
@dp.message_handler(state=CreateProfile.age)
async def create_profile_age(message: types.Message, state: FSMContext):
	try:
		if str(message.text) == 'Exit':
			await state.finish()
			await menu_break(message)
			return
		if int(message.text) < 14:
			await message.answer("You're not old enough...")
			await message.answer(cus_ans.random_reapeat_list())

			#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
			return
		elif int(message.text) > 6 and int(message.text) < 54:
			await state.update_data(profile_age=message.text)
			#–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
			button_skip = KeyboardButton('Skip')

			skip_input = ReplyKeyboardMarkup(one_time_keyboard=True)
			skip_input.add(button_skip)

			await CreateProfile.next()
		else:
			await answer.message('Only numbers')
			return
	except:
		await message.answer(cus_ans.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(lambda message: message.text == 'Delete Profile')
async def delete_profile(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã'''

	try:
		db.delete_profile(message.from_user.id)
		await message.answer('Profile deleted successfully!')
		await menu_break(message)
	except:
		await message.answer(cus_ans.random_reapeat_list())
		return

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(lambda message: message.text == 'Change Profilee')
async def edit_profile(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã'''
	try:
		if(not db.profile_exists(message.from_user.id)):
			await message.answer("You don't have a profile")
		elif(db.profile_exists(message.from_user.id)) :
			photo = open('photo_user/' + str(message.from_user.id) + '.jpg','rb')
			#–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
			button_again = KeyboardButton('Fill your profile again')

			button_edit_description = KeyboardButton('Change about yourself')

			button_edit_age = KeyboardButton('Change your age')

			button_cancel = KeyboardButton('Exit')

			edit_profile = ReplyKeyboardMarkup(one_time_keyboard=True)
			edit_profile.add(button_again,button_edit_description,button_edit_age,button_cancel)
			caption = 'Your Profile:\n\nName - ' + str(db.all_profile(str(message.from_user.id))[0][3]).title() + '\nAbout you - ' + str(db.all_profile(str(message.from_user.id))[0][4]) + '\nCity - ' + str(db.all_profile(str(message.from_user.id))[0][5]).title() + '\nAge?) - ' + str(db.all_profile(str(message.from_user.id))[0][8])
			await message.answer_photo(photo,caption=caption,reply_markup=edit_profile)
			photo.close()
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ
@dp.message_handler(lambda message: message.text == 'Fill your profile again')
async def edit_profile_again(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ'''
	try:
		db.delete_profile(message.from_user.id)
		await create_profile(message)

	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class EditProfile(StatesGroup):
	description_edit = State()
	age_edit = State()

#—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Å—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã

@dp.message_handler(lambda message: message.text == 'Change your age' or message.text == 'Change about yourself')
async def edit_profile_age(message : types.Message):
	try:
		#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
		button_cancel = KeyboardButton('Deny')

		button_cancel_menu = ReplyKeyboardMarkup(one_time_keyboard=True)

		button_cancel_menu.add(button_cancel)

		if message.text == 'Change age':
			await message.answer('How old are you?',reply_markup=button_cancel_menu)
			await EditProfile.age_edit.set()
		elif message.text == "What's your message to the world?":
			await message.answer('Change about yourself!',reply_markup=button_cancel_menu)
			await EditProfile.description_edit.set()
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return
@dp.message_handler(state=EditProfile.age_edit)
async def edit_profile_age_step2(message: types.Message, state: FSMContext):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Å—Ç–∞ –≤ –±–¥'''
	try:
		if str(message.text) == 'Deny':
			await state.finish()
			await menu_break(message)

			return

		elif int(message.text) > 6 and int(message.text) < 54:
			await message.answer('Age successfully changed!')
			await state.update_data(edit_profile_age=message.text)
			user_data = await state.get_data()

			db.edit_age(user_data['edit_profile_age'],str(message.from_user.id))
			await state.finish()
			await edit_profile(message)
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		photoprint(e)
		return
@dp.message_handler(state=EditProfile.description_edit)
async def edit_profile_description(message: types.Message, state: FSMContext):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–¥'''
	try:
		if str(message.text) == 'Deny':
			await state.finish()
			await menu_break(message)

			return
		await message.answer('Description changed!')
		await state.update_data(edit_profile_description=message.text)
		user_data = await state.get_data()

		db.edit_description(user_data['edit_profile_description'],str(message.from_user.id))
		await state.finish()
		await edit_profile(message)
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return

@dp.message_handler(lambda message: message.text == 'Exit')
async def exit(message : types.Message):
	await menu_break(message)



#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class SearchProfile(StatesGroup):
	city_search = State()
	in_doing = State()

#—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–Ω–∫–µ—Ç–∞–º
@dp.message_handler(lambda message: message.text == 'Find somebody for me!')
async def search_profile(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞,–ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –±–¥'''
	try:
		if db.profile_exists(message.from_user.id) == False:
			await message.answer("You don't have a Profile, come back later!")
		else:
			await message.answer('Choose the city')
			await SearchProfile.city_search.set()
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		await State.finish()
		print(e)
		return

@dp.message_handler(state=SearchProfile.city_search)
async def seach_profile_step2(message: types.Message, state: FSMContext):
	'''–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞'''
	try:
		await state.update_data(search_profile_city=message.text.lower())

		user_data = await state.get_data()

		db.set_city_search(str(user_data['search_profile_city']),str(message.from_user.id))
		if (bool(len(db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))))):
			try:
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except:
				db.edit_zero_profile_status(message.from_user.id)
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			await state.update_data(last_profile_id=profile_id)
			db.edit_profile_status(str(message.from_user.id),db.search_profile_status(str(message.from_user.id))[0])

			#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
			button_like = KeyboardButton('üëç')

			button_dislike = KeyboardButton('üëé')

			mark_menu = ReplyKeyboardMarkup()

			mark_menu.add(button_dislike,button_like)

			name_profile = str(db.get_info(profile_id)[3])
			age_profile = str(db.get_info(profile_id)[8])
			description_profile = str(db.get_info(profile_id)[4])
			social_link_profile = str(db.get_info(profile_id)[9])
			photo_profile = open('photo_user/' + str(profile_id) + '.jpg','rb')

			city = str(db.get_info_user(message.from_user.id)[6]).title()

			final_text_profile = f'Found somebody for you\n\n{name_profile},{age_profile},{city}\n{description_profile}'

			await message.answer_photo(photo_profile,caption=final_text_profile,reply_markup=mark_menu)


			await SearchProfile.next()
		else:
			await message.answer('No one from there')
			await state.finish()
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		await state.finish()
		await menu_break(message)
		print(e)

@dp.message_handler(state=SearchProfile.in_doing)
async def seach_profile_step3(message: types.Message, state: FSMContext):
	'''–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–µ–π –æ—Ü–µ–Ω–∫–∏(–ª–∞–π–∫,–¥–∏–∑–ª–∞–π–∫,—Ä–µ–ø–æ—Ä—Ç)'''
	try:
		if str(message.text) == 'üëç':
			if str(message.text) == '/start' or str(message.text) == 'Exit':
				await state.finish()
				await menu_break(message)

			user_data = await state.get_data()

			try:
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except IndexError:
				db.edit_zero_profile_status(message.from_user.id)
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except Exception as e:
				print(e)
				await state.finish()
				await menu_break(message)
			await state.update_data(last_profile_id=profile_id)
			if db.add_like_exists(str(message.from_user.id),user_data['last_profile_id']) == False:
				db.add_like(str(message.from_user.id),user_data['last_profile_id'])
				db.up_rating(db.check_rating(profile_id)[0],user_data['last_profile_id'])
			db.edit_profile_status(str(message.from_user.id),db.search_profile_status(str(message.from_user.id))[0])
			name_profile = str(db.get_info(profile_id)[3])
			age_profile = str(db.get_info(profile_id)[8])
			description_profile = str(db.get_info(profile_id)[4])
			social_link_profile = str(db.get_info(profile_id)[9])
			photo_profile = open('photo_user/' + str(profile_id) + '.jpg','rb')

			city = str(user_data['search_profile_city']).title()

			final_text_profile = f'Found somebody for youÔ∏è\n\n{name_profile},{age_profile},{city}\n{description_profile}'

			await message.answer_photo(photo_profile,caption=final_text_profile)

			name_profile_self = str(db.get_info(str(message.from_user.id))[3])
			age_profile_self = str(db.get_info(str(message.from_user.id))[8])
			description_profile_self = str(db.get_info(str(message.from_user.id))[4])
			social_link_profile_self = str(db.get_info(str(message.from_user.id))[9])
			photo_profile_self = open('photo_user/' + str(message.from_user.id) + '.jpg','rb')

			final_text_profile_self = f'Somebody want to get along with you..\n\n{name_profile_self},{age_profile_self},{city}\n{description_profile_self}\n\n–ß–µ–≥–æ —Ç—ã –∂–¥—ë—à—å,–±–µ–≥–∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è - @{str(message.from_user.username)}'

			await bot.send_photo(user_data['last_profile_id'],photo_profile_self,caption=final_text_profile_self)


			return
			await state.finish()
		elif str(message.text) == 'üëé':
			if str(message.text) == '/start' or str(message.text) == 'Exit':
				await state.finish()
				await menu_break(message)

			user_data = await state.get_data()

			try:
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except IndexError:
				db.edit_zero_profile_status(message.from_user.id)
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except Exception as e:
				print(e)
				await state.finish()
				await menu_break(message)

			await state.update_data(last_profile_id=profile_id)

			db.edit_profile_status(str(message.from_user.id),db.search_profile_status(str(message.from_user.id))[0])
			name_profile = str(db.get_info(profile_id)[3])
			age_profile = str(db.get_info(profile_id)[8])
			description_profile = str(db.get_info(profile_id)[4])
			social_link_profile = str(db.get_info(profile_id)[9])
			photo_profile = open('photo_user/' + str(profile_id) + '.jpg','rb')

			city = str(user_data['search_profile_city']).title()

			final_text_profile = f'Found somebody for youÔ∏èÔ∏è\n\n{name_profile},{age_profile},{city}\n{description_profile}'

			await message.answer_photo(photo_profile,caption=final_text_profile)

			if str(message.text) == '/start' or str(message.text) == 'Exit':
				await state.finish()
				await menu_break(message)

			user_data = await state.get_data()



			try:
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except IndexError:
				db.edit_zero_profile_status(message.from_user.id)
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except Exception as e:
				print(e)
				await state.finish()
				await menu_break(message)

			name_profile = str(db.get_info(profile_id)[3])
			age_profile = str(db.get_info(profile_id)[8])
			description_profile = str(db.get_info(profile_id)[4])
			social_link_profile = str(db.get_info(profile_id)[9])
			photo_profile = open('photo_user/' + str(profile_id) + '.jpg','rb')

			city = str(user_data['search_profile_city']).title()

			final_text_profile = f'Found somebody for youÔ∏èÔ∏è\n\n{name_profile},{age_profile},{city}\n{description_profile}'

			await message.answer_photo(photo_profile,caption=final_text_profile)
		else:
			await state.finish()
			await menu_break(message)
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		await state.finish()
		await menu_break(message)
		print(e)
		return
